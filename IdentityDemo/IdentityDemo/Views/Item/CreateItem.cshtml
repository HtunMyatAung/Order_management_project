@model IdentityDemo.ViewModels.SingleItemViewModel
@{
    Layout = "_Owner_layout";
    
}
<style>
        .autocomplete { position: relative; width: 500px; margin: 20px auto; }
        .autocomplete input[type="text"] { width: 100%; padding: 10px; font-size: 16px; border: 1px solid #ccc; border-radius: 4px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
        .autocomplete .autocomplete-items { display: none; position: absolute; background-color: white; border: 1px solid #ccc; max-height: 300px; overflow-y: auto; z-index: 99; width: calc(100% - 2px); box-shadow: 0 5px 10px rgba(0,0,0,0.2); border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; }
        .autocomplete .autocomplete-items.active { display: block; }
        .autocomplete .autocomplete-item { padding: 10px; cursor: pointer; transition: background-color 0.3s ease; }
        .autocomplete .autocomplete-item:hover { background-color: #f1f1f1; }
</style>
<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-7">
            <div class="card">
                <div class="card-header text-center">
                    <h2>Item Update</h2>
                </div>
                <div class="card-body">
                    <form asp-action="CreateItem" asp-controller="Item" method="post" enctype="multipart/form-data" runat="server">
                        <input type="hidden" asp-for="ItemId" value="1"/>
                        <input type="hidden" asp-for="Shop_Id" />
                        <div class="form-group row">
                            <div class="col-sm-10">
                                <label for="profileImage" class="col-sm-2 col-form-label">Item Image*</label>
                                <!--<img id="blah" class="image-preview" src="#" alt="Preview Image" style="max-width: 100%; max-height: 200px; display: block; margin-top: 10px;" />-->
                                <input asp-for="ItemImage" class="form-control-file" accept="image/*" type="file" id="imgInp" name="ItemImage" onchange="previewImage(event)" />
                                <span asp-validation-for="ItemImage" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label asp-for="ItemName">Name*</label>
                            <input type="text" class="form-control" asp-for="ItemName" placeholder="Enter item name" id="nameInput" data-error-message="Enter valid Name">
                            <span asp-validation-for="ItemName" class="text-danger" id="nameValidationMessage"></span>
                        </div>
                        <div class="form-group autocomplete">
                            <label asp-for="Category">Category*</label>
                            <input asp-for="Category" type="text" id="searchBox">
                            <span asp-validation-for="Category" class="text-danger" id="categoryValidationMessage"></span>
                            <div class="autocomplete-items" id="autocomplete-items"></div>
                        </div>
                        <div class="form-group">
                            <label asp-for="ItemPrice">Price*</label>
                            <input type="number" step="0.01" class="form-control" asp-for="ItemPrice" placeholder="Enter item price" id="priceInput" data-error-message="Enter price number">
                            <span asp-validation-for="ItemPrice" class="text-danger" id="priceValidationMessage"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="ItemQuantity">Quantity*</label>
                            <input type="number" class="form-control" asp-for="ItemQuantity" placeholder="Enter item quantity" id="quantityInput" data-error-message="Enter quantity number">
                            <span asp-validation-for="ItemQuantity" class="text-danger" id="quantityValidationMessage"></span>
                        </div>
                        
                        <div class="text-right">
                            <a href="@Url.Action("Owner_item_list","Shop")" class="btn btn-secondary mr-1" style="width: 130px;">Cancel</a>
                            <button type="submit" class="btn btn-primary" id="submitButton" style="width: 130px;">Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/js/itemvalidat.js"></script>
<script>
    document.getElementById('phoneInput').addEventListener('input', function () {
        this.value = this.value.replace(/[^0-9]/g, ''); // Replace any non-numeric characters with an empty string
    });

    function previewImage(event) {
        const imgInp = event.target;
        const file = imgInp.files[0];

        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById('blah').src = e.target.result;
            }
            reader.readAsDataURL(file);
        }
    }

</script>
<script>//category js
    var products = @Html.Raw(Json.Serialize(Model.Categories));
    function autocomplete(input, products) {
        const searchTerm = input.value.trim().toLowerCase();
        return searchTerm === '' ? products : products.filter(product => product.toLowerCase().startsWith(searchTerm));
    }
    function updateAutocompleteDropdown(input) {
        const autocompleteDropdown = document.getElementById('autocomplete-items');
        autocompleteDropdown.innerHTML = '';
        const suggestions = autocomplete(input, products);
        suggestions.forEach(suggestion => {
            const autocompleteItem = document.createElement('div');
            autocompleteItem.classList.add('autocomplete-item');
            autocompleteItem.textContent = suggestion;
            autocompleteItem.addEventListener('click', () => {
                input.value = suggestion;
                autocompleteDropdown.classList.remove('active');
            });
            autocompleteDropdown.appendChild(autocompleteItem);
        });
        autocompleteDropdown.classList.toggle('active', input.value.trim() !== '' && suggestions.length > 0);
    }
    const searchBox = document.getElementById('searchBox');
    searchBox.addEventListener('input', () => updateAutocompleteDropdown(searchBox));
    searchBox.addEventListener('focus', () => {
        if (searchBox.value.trim() !== '') {
            updateAutocompleteDropdown(searchBox);
        } else {
            const autocompleteDropdown = document.getElementById('autocomplete-items');
            autocompleteDropdown.innerHTML = '';
            products.forEach(product => {
                const autocompleteItem = document.createElement('div');
                autocompleteItem.classList.add('autocomplete-item');
                autocompleteItem.textContent = product;
                autocompleteItem.addEventListener('click', () => {
                    searchBox.value = product;
                    autocompleteDropdown.classList.remove('active');
                });
                autocompleteDropdown.appendChild(autocompleteItem);
            });
            autocompleteDropdown.classList.add('active');
        }
    });
    document.addEventListener('click', (event) => {
        if (!event.target.closest('.autocomplete')) {
            document.getElementById('autocomplete-items').classList.remove('active');
        }
    });
</script>



